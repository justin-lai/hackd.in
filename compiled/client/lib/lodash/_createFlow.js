'use strict';

var LodashWrapper = require('./_LodashWrapper'),
    baseFlatten = require('./_baseFlatten'),
    getData = require('./_getData'),
    getFuncName = require('./_getFuncName'),
    isArray = require('./isArray'),
    isLaziable = require('./_isLaziable'),
    rest = require('./rest');

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used to compose bitmasks for wrapper metadata. */
var CURRY_FLAG = 8,
    PARTIAL_FLAG = 32,
    ARY_FLAG = 128,
    REARG_FLAG = 256;

/**
 * Creates a `_.flow` or `_.flowRight` function.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new flow function.
 */
function createFlow(fromRight) {
  return rest(function (funcs) {
    funcs = baseFlatten(funcs, 1);

    var length = funcs.length,
        index = length,
        prereq = LodashWrapper.prototype.thru;

    if (fromRight) {
      funcs.reverse();
    }
    while (index--) {
      var func = funcs[index];
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
        var wrapper = new LodashWrapper([], true);
      }
    }
    index = wrapper ? index : length;
    while (++index < length) {
      func = funcs[index];

      var funcName = getFuncName(func),
          data = funcName == 'wrapper' ? getData(func) : undefined;

      if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
        wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
      } else {
        wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
      }
    }
    return function () {
      var args = arguments,
          value = args[0];

      if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
        return wrapper.plant(value).value();
      }
      var index = 0,
          result = length ? funcs[index].apply(this, args) : value;

      while (++index < length) {
        result = funcs[index].call(this, result);
      }
      return result;
    };
  });
}

module.exports = createFlow;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9saWIvbG9kYXNoL19jcmVhdGVGbG93LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSSxnQkFBZ0IsUUFBUSxrQkFBUixDQUFoQjtJQUNBLGNBQWMsUUFBUSxnQkFBUixDQUFkO0lBQ0EsVUFBVSxRQUFRLFlBQVIsQ0FBVjtJQUNBLGNBQWMsUUFBUSxnQkFBUixDQUFkO0lBQ0EsVUFBVSxRQUFRLFdBQVIsQ0FBVjtJQUNBLGFBQWEsUUFBUSxlQUFSLENBQWI7SUFDQSxPQUFPLFFBQVEsUUFBUixDQUFQOzs7QUFHSixJQUFJLG1CQUFtQixHQUFuQjs7O0FBR0osSUFBSSxrQkFBa0IscUJBQWxCOzs7QUFHSixJQUFJLGFBQWEsQ0FBYjtJQUNBLGVBQWUsRUFBZjtJQUNBLFdBQVcsR0FBWDtJQUNBLGFBQWEsR0FBYjs7Ozs7Ozs7O0FBU0osU0FBUyxVQUFULENBQW9CLFNBQXBCLEVBQStCO0FBQzdCLFNBQU8sS0FBSyxVQUFTLEtBQVQsRUFBZ0I7QUFDMUIsWUFBUSxZQUFZLEtBQVosRUFBbUIsQ0FBbkIsQ0FBUixDQUQwQjs7QUFHMUIsUUFBSSxTQUFTLE1BQU0sTUFBTjtRQUNULFFBQVEsTUFBUjtRQUNBLFNBQVMsY0FBYyxTQUFkLENBQXdCLElBQXhCLENBTGE7O0FBTzFCLFFBQUksU0FBSixFQUFlO0FBQ2IsWUFBTSxPQUFOLEdBRGE7S0FBZjtBQUdBLFdBQU8sT0FBUCxFQUFnQjtBQUNkLFVBQUksT0FBTyxNQUFNLEtBQU4sQ0FBUCxDQURVO0FBRWQsVUFBSSxPQUFPLElBQVAsSUFBZSxVQUFmLEVBQTJCO0FBQzdCLGNBQU0sSUFBSSxTQUFKLENBQWMsZUFBZCxDQUFOLENBRDZCO09BQS9CO0FBR0EsVUFBSSxVQUFVLENBQUMsT0FBRCxJQUFZLFlBQVksSUFBWixLQUFxQixTQUFyQixFQUFnQztBQUN4RCxZQUFJLFVBQVUsSUFBSSxhQUFKLENBQWtCLEVBQWxCLEVBQXNCLElBQXRCLENBQVYsQ0FEb0Q7T0FBMUQ7S0FMRjtBQVNBLFlBQVEsVUFBVSxLQUFWLEdBQWtCLE1BQWxCLENBbkJrQjtBQW9CMUIsV0FBTyxFQUFFLEtBQUYsR0FBVSxNQUFWLEVBQWtCO0FBQ3ZCLGFBQU8sTUFBTSxLQUFOLENBQVAsQ0FEdUI7O0FBR3ZCLFVBQUksV0FBVyxZQUFZLElBQVosQ0FBWDtVQUNBLE9BQU8sWUFBWSxTQUFaLEdBQXdCLFFBQVEsSUFBUixDQUF4QixHQUF3QyxTQUF4QyxDQUpZOztBQU12QixVQUFJLFFBQVEsV0FBVyxLQUFLLENBQUwsQ0FBWCxDQUFSLElBQ0UsS0FBSyxDQUFMLE1BQVksV0FBVyxVQUFYLEdBQXdCLFlBQXhCLEdBQXVDLFVBQXZDLENBQVosSUFDQSxDQUFDLEtBQUssQ0FBTCxFQUFRLE1BQVIsSUFBa0IsS0FBSyxDQUFMLEtBQVcsQ0FBWCxFQUNuQjtBQUNKLGtCQUFVLFFBQVEsWUFBWSxLQUFLLENBQUwsQ0FBWixDQUFSLEVBQThCLEtBQTlCLENBQW9DLE9BQXBDLEVBQTZDLEtBQUssQ0FBTCxDQUE3QyxDQUFWLENBREk7T0FITixNQUtPO0FBQ0wsa0JBQVUsSUFBQyxDQUFLLE1BQUwsSUFBZSxDQUFmLElBQW9CLFdBQVcsSUFBWCxDQUFwQixHQUNQLFFBQVEsUUFBUixHQURNLEdBRU4sUUFBUSxJQUFSLENBQWEsSUFBYixDQUZNLENBREw7T0FMUDtLQU5GO0FBaUJBLFdBQU8sWUFBVztBQUNoQixVQUFJLE9BQU8sU0FBUDtVQUNBLFFBQVEsS0FBSyxDQUFMLENBQVIsQ0FGWTs7QUFJaEIsVUFBSSxXQUFXLEtBQUssTUFBTCxJQUFlLENBQWYsSUFDWCxRQUFRLEtBQVIsQ0FEQSxJQUNrQixNQUFNLE1BQU4sSUFBZ0IsZ0JBQWhCLEVBQWtDO0FBQ3RELGVBQU8sUUFBUSxLQUFSLENBQWMsS0FBZCxFQUFxQixLQUFyQixFQUFQLENBRHNEO09BRHhEO0FBSUEsVUFBSSxRQUFRLENBQVI7VUFDQSxTQUFTLFNBQVMsTUFBTSxLQUFOLEVBQWEsS0FBYixDQUFtQixJQUFuQixFQUF5QixJQUF6QixDQUFULEdBQTBDLEtBQTFDLENBVEc7O0FBV2hCLGFBQU8sRUFBRSxLQUFGLEdBQVUsTUFBVixFQUFrQjtBQUN2QixpQkFBUyxNQUFNLEtBQU4sRUFBYSxJQUFiLENBQWtCLElBQWxCLEVBQXdCLE1BQXhCLENBQVQsQ0FEdUI7T0FBekI7QUFHQSxhQUFPLE1BQVAsQ0FkZ0I7S0FBWCxDQXJDbUI7R0FBaEIsQ0FBWixDQUQ2QjtDQUEvQjs7QUF5REEsT0FBTyxPQUFQLEdBQWlCLFVBQWpCIiwiZmlsZSI6Il9jcmVhdGVGbG93LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIExvZGFzaFdyYXBwZXIgPSByZXF1aXJlKCcuL19Mb2Rhc2hXcmFwcGVyJyksXG4gICAgYmFzZUZsYXR0ZW4gPSByZXF1aXJlKCcuL19iYXNlRmxhdHRlbicpLFxuICAgIGdldERhdGEgPSByZXF1aXJlKCcuL19nZXREYXRhJyksXG4gICAgZ2V0RnVuY05hbWUgPSByZXF1aXJlKCcuL19nZXRGdW5jTmFtZScpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0xhemlhYmxlID0gcmVxdWlyZSgnLi9faXNMYXppYWJsZScpLFxuICAgIHJlc3QgPSByZXF1aXJlKCcuL3Jlc3QnKTtcblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqIFVzZWQgYXMgdGhlIGBUeXBlRXJyb3JgIG1lc3NhZ2UgZm9yIFwiRnVuY3Rpb25zXCIgbWV0aG9kcy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHdyYXBwZXIgbWV0YWRhdGEuICovXG52YXIgQ1VSUllfRkxBRyA9IDgsXG4gICAgUEFSVElBTF9GTEFHID0gMzIsXG4gICAgQVJZX0ZMQUcgPSAxMjgsXG4gICAgUkVBUkdfRkxBRyA9IDI1NjtcblxuLyoqXG4gKiBDcmVhdGVzIGEgYF8uZmxvd2Agb3IgYF8uZmxvd1JpZ2h0YCBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmbG93IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVGbG93KGZyb21SaWdodCkge1xuICByZXR1cm4gcmVzdChmdW5jdGlvbihmdW5jcykge1xuICAgIGZ1bmNzID0gYmFzZUZsYXR0ZW4oZnVuY3MsIDEpO1xuXG4gICAgdmFyIGxlbmd0aCA9IGZ1bmNzLmxlbmd0aCxcbiAgICAgICAgaW5kZXggPSBsZW5ndGgsXG4gICAgICAgIHByZXJlcSA9IExvZGFzaFdyYXBwZXIucHJvdG90eXBlLnRocnU7XG5cbiAgICBpZiAoZnJvbVJpZ2h0KSB7XG4gICAgICBmdW5jcy5yZXZlcnNlKCk7XG4gICAgfVxuICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICB2YXIgZnVuYyA9IGZ1bmNzW2luZGV4XTtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcmVyZXEgJiYgIXdyYXBwZXIgJiYgZ2V0RnVuY05hbWUoZnVuYykgPT0gJ3dyYXBwZXInKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0gbmV3IExvZGFzaFdyYXBwZXIoW10sIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpbmRleCA9IHdyYXBwZXIgPyBpbmRleCA6IGxlbmd0aDtcbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgZnVuYyA9IGZ1bmNzW2luZGV4XTtcblxuICAgICAgdmFyIGZ1bmNOYW1lID0gZ2V0RnVuY05hbWUoZnVuYyksXG4gICAgICAgICAgZGF0YSA9IGZ1bmNOYW1lID09ICd3cmFwcGVyJyA/IGdldERhdGEoZnVuYykgOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChkYXRhICYmIGlzTGF6aWFibGUoZGF0YVswXSkgJiZcbiAgICAgICAgICAgIGRhdGFbMV0gPT0gKEFSWV9GTEFHIHwgQ1VSUllfRkxBRyB8IFBBUlRJQUxfRkxBRyB8IFJFQVJHX0ZMQUcpICYmXG4gICAgICAgICAgICAhZGF0YVs0XS5sZW5ndGggJiYgZGF0YVs5XSA9PSAxXG4gICAgICAgICAgKSB7XG4gICAgICAgIHdyYXBwZXIgPSB3cmFwcGVyW2dldEZ1bmNOYW1lKGRhdGFbMF0pXS5hcHBseSh3cmFwcGVyLCBkYXRhWzNdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdyYXBwZXIgPSAoZnVuYy5sZW5ndGggPT0gMSAmJiBpc0xhemlhYmxlKGZ1bmMpKVxuICAgICAgICAgID8gd3JhcHBlcltmdW5jTmFtZV0oKVxuICAgICAgICAgIDogd3JhcHBlci50aHJ1KGZ1bmMpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICB2YWx1ZSA9IGFyZ3NbMF07XG5cbiAgICAgIGlmICh3cmFwcGVyICYmIGFyZ3MubGVuZ3RoID09IDEgJiZcbiAgICAgICAgICBpc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPj0gTEFSR0VfQVJSQVlfU0laRSkge1xuICAgICAgICByZXR1cm4gd3JhcHBlci5wbGFudCh2YWx1ZSkudmFsdWUoKTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gbGVuZ3RoID8gZnVuY3NbaW5kZXhdLmFwcGx5KHRoaXMsIGFyZ3MpIDogdmFsdWU7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmNzW2luZGV4XS5jYWxsKHRoaXMsIHJlc3VsdCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUZsb3c7XG4iXX0=