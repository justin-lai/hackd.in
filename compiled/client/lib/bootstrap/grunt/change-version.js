#!/usr/bin/env node

'use strict';

/*!
 * Script to update version number references in the project.
 * Copyright 2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */

var fs = require('fs');
var path = require('path');
var sh = require('shelljs');
sh.config.fatal = true;
var sed = sh.sed;

// Blame TC39... https://github.com/benjamingr/RegExp.escape/issues/37
RegExp.quote = function (string) {
  return string.replace(/[-\\^$*+?.()|[\]{}]/g, '\\$&');
};
RegExp.quoteReplacement = function (string) {
  return string.replace(/[$]/g, '$$');
};

var DRY_RUN = false;

function walkAsync(directory, excludedDirectories, fileCallback, errback) {
  if (excludedDirectories.has(path.parse(directory).base)) {
    return;
  }
  fs.readdir(directory, function (err, names) {
    if (err) {
      errback(err);
      return;
    }
    names.forEach(function (name) {
      var filepath = path.join(directory, name);
      fs.lstat(filepath, function (err, stats) {
        if (err) {
          process.nextTick(errback, err);
          return;
        }
        if (stats.isSymbolicLink()) {
          return;
        } else if (stats.isDirectory()) {
          process.nextTick(walkAsync, filepath, excludedDirectories, fileCallback, errback);
        } else if (stats.isFile()) {
          process.nextTick(fileCallback, filepath);
        }
      });
    });
  });
}

function replaceRecursively(directory, excludedDirectories, allowedExtensions, original, replacement) {
  original = new RegExp(RegExp.quote(original), 'g');
  replacement = RegExp.quoteReplacement(replacement);
  var updateFile = !DRY_RUN ? function (filepath) {
    if (allowedExtensions.has(path.parse(filepath).ext)) {
      sed('-i', original, replacement, filepath);
    }
  } : function (filepath) {
    if (allowedExtensions.has(path.parse(filepath).ext)) {
      console.log('FILE: ' + filepath);
    } else {
      console.log('EXCLUDED:' + filepath);
    }
  };
  walkAsync('.', excludedDirectories, updateFile, function (err) {
    console.error('ERROR while traversing directory!:');
    console.error(err);
    process.exit(1);
  });
}

function main(args) {
  if (args.length !== 2) {
    console.error('USAGE: change-version old_version new_version');
    console.error('Got arguments:', args);
    process.exit(1);
  }
  var oldVersion = args[0];
  var newVersion = args[1];
  var EXCLUDED_DIRS = new Set(['.git', 'node_modules', 'vendor']);
  var INCLUDED_EXTENSIONS = new Set([
  // This extension whitelist is how we avoid modifying binary files
  '', '.css', '.html', '.js', '.json', '.md', '.scss', '.txt', '.yml']);
  replaceRecursively('.', EXCLUDED_DIRS, INCLUDED_EXTENSIONS, oldVersion, newVersion);
};

main(process.argv.slice(2));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NsaWVudC9saWIvYm9vdHN0cmFwL2dydW50L2NoYW5nZS12ZXJzaW9uLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQTs7Ozs7Ozs7QUFPQSxJQUFJLEtBQUssUUFBUSxJQUFSLENBQUw7QUFDSixJQUFJLE9BQU8sUUFBUSxNQUFSLENBQVA7QUFDSixJQUFJLEtBQUssUUFBUSxTQUFSLENBQUw7QUFDSixHQUFHLE1BQUgsQ0FBVSxLQUFWLEdBQWtCLElBQWxCO0FBQ0EsSUFBSSxNQUFNLEdBQUcsR0FBSDs7O0FBR1YsT0FBTyxLQUFQLEdBQWUsVUFBVSxNQUFWLEVBQWtCO0FBQy9CLFNBQU8sT0FBTyxPQUFQLENBQWUsc0JBQWYsRUFBdUMsTUFBdkMsQ0FBUCxDQUQrQjtDQUFsQjtBQUdmLE9BQU8sZ0JBQVAsR0FBMEIsVUFBVSxNQUFWLEVBQWtCO0FBQzFDLFNBQU8sT0FBTyxPQUFQLENBQWUsTUFBZixFQUF1QixJQUF2QixDQUFQLENBRDBDO0NBQWxCOztBQUkxQixJQUFJLFVBQVUsS0FBVjs7QUFFSixTQUFTLFNBQVQsQ0FBbUIsU0FBbkIsRUFBOEIsbUJBQTlCLEVBQW1ELFlBQW5ELEVBQWlFLE9BQWpFLEVBQTBFO0FBQ3hFLE1BQUksb0JBQW9CLEdBQXBCLENBQXdCLEtBQUssS0FBTCxDQUFXLFNBQVgsRUFBc0IsSUFBdEIsQ0FBNUIsRUFBeUQ7QUFDdkQsV0FEdUQ7R0FBekQ7QUFHQSxLQUFHLE9BQUgsQ0FBVyxTQUFYLEVBQXNCLFVBQVUsR0FBVixFQUFlLEtBQWYsRUFBc0I7QUFDMUMsUUFBSSxHQUFKLEVBQVM7QUFDUCxjQUFRLEdBQVIsRUFETztBQUVQLGFBRk87S0FBVDtBQUlBLFVBQU0sT0FBTixDQUFjLFVBQVUsSUFBVixFQUFnQjtBQUM1QixVQUFJLFdBQVcsS0FBSyxJQUFMLENBQVUsU0FBVixFQUFxQixJQUFyQixDQUFYLENBRHdCO0FBRTVCLFNBQUcsS0FBSCxDQUFTLFFBQVQsRUFBbUIsVUFBVSxH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LENBQWEsS0FBYixDQUFtQixDQUFuQixDQUFMIiwiZmlsZSI6ImNoYW5nZS12ZXJzaW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4ndXNlIHN0cmljdCc7XG5cbi8qIVxuICogU2NyaXB0IHRvIHVwZGF0ZSB2ZXJzaW9uIG51bWJlciByZWZlcmVuY2VzIGluIHRoZSBwcm9qZWN0LlxuICogQ29weXJpZ2h0IDIwMTUgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqL1xudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xudmFyIHNoID0gcmVxdWlyZSgnc2hlbGxqcycpO1xuc2guY29uZmlnLmZhdGFsID0gdHJ1ZTtcbnZhciBzZWQgPSBzaC5zZWQ7XG5cbi8vIEJsYW1lIFRDMzkuLi4gaHR0cHM6Ly9naXRodWIuY29tL2JlbmphbWluZ3IvUmVnRXhwLmVzY2FwZS9pc3N1ZXMvMzdcblJlZ0V4cC5xdW90ZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9bLVxcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcbn07XG5SZWdFeHAucXVvdGVSZXBsYWNlbWVudCA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9bJF0vZywgJyQkJyk7XG59O1xuXG52YXIgRFJZX1JVTiA9IGZhbHNlO1xuXG5mdW5jdGlvbiB3YWxrQXN5bmMoZGlyZWN0b3J5LCBleGNsdWRlZERpcmVjdG9yaWVzLCBmaWxlQ2FsbGJhY2ssIGVycmJhY2spIHtcbiAgaWYgKGV4Y2x1ZGVkRGlyZWN0b3JpZXMuaGFzKHBhdGgucGFyc2UoZGlyZWN0b3J5KS5iYXNlKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBmcy5yZWFkZGlyKGRpcmVjdG9yeSwgZnVuY3Rpb24gKGVyciwgbmFtZXMpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBlcnJiYWNrKGVycik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG5hbWVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHZhciBmaWxlcGF0aCA9IHBhdGguam9pbihkaXJlY3RvcnksIG5hbWUpO1xuICAgICAgZnMubHN0YXQoZmlsZXBhdGgsIGZ1bmN0aW9uIChlcnIsIHN0YXRzKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGVycmJhY2ssIGVycik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0cy5pc1N5bWJvbGljTGluaygpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHN0YXRzLmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKHdhbGtBc3luYywgZmlsZXBhdGgsIGV4Y2x1ZGVkRGlyZWN0b3JpZXMsIGZpbGVDYWxsYmFjaywgZXJyYmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3RhdHMuaXNGaWxlKCkpIHtcbiAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZpbGVDYWxsYmFjaywgZmlsZXBhdGgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VSZWN1cnNpdmVseShkaXJlY3RvcnksIGV4Y2x1ZGVkRGlyZWN0b3JpZXMsIGFsbG93ZWRFeHRlbnNpb25zLCBvcmlnaW5hbCwgcmVwbGFjZW1lbnQpIHtcbiAgb3JpZ2luYWwgPSBuZXcgUmVnRXhwKFJlZ0V4cC5xdW90ZShvcmlnaW5hbCksICdnJyk7XG4gIHJlcGxhY2VtZW50ID0gUmVnRXhwLnF1b3RlUmVwbGFjZW1lbnQocmVwbGFjZW1lbnQpO1xuICB2YXIgdXBkYXRlRmlsZSA9ICFEUllfUlVOID8gKGZ1bmN0aW9uIChmaWxlcGF0aCkge1xuICAgICAgaWYgKGFsbG93ZWRFeHRlbnNpb25zLmhhcyhwYXRoLnBhcnNlKGZpbGVwYXRoKS5leHQpKSB7XG4gICAgICAgIHNlZCgnLWknLCBvcmlnaW5hbCwgcmVwbGFjZW1lbnQsIGZpbGVwYXRoKTtcbiAgICAgIH1cbiAgICB9KSA6IChmdW5jdGlvbiAoZmlsZXBhdGgpIHtcbiAgICAgIGlmIChhbGxvd2VkRXh0ZW5zaW9ucy5oYXMocGF0aC5wYXJzZShmaWxlcGF0aCkuZXh0KSkge1xuICAgICAgICBjb25zb2xlLmxvZygnRklMRTogJyArIGZpbGVwYXRoKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZygnRVhDTFVERUQ6JyArIGZpbGVwYXRoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgd2Fsa0FzeW5jKCcuJywgZXhjbHVkZWREaXJlY3RvcmllcywgdXBkYXRlRmlsZSwgZnVuY3Rpb24gKGVycikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0VSUk9SIHdoaWxlIHRyYXZlcnNpbmcgZGlyZWN0b3J5ITonKVxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICBwcm9jZXNzLmV4aXQoMSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBtYWluKGFyZ3MpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoICE9PSAyKSB7XG4gICAgY29uc29sZS5lcnJvcignVVNBR0U6IGNoYW5nZS12ZXJzaW9uIG9sZF92ZXJzaW9uIG5ld192ZXJzaW9uJyk7XG4gICAgY29uc29sZS5lcnJvcignR290IGFyZ3VtZW50czonLCBhcmdzKTtcbiAgICBwcm9jZXNzLmV4aXQoMSk7XG4gIH1cbiAgdmFyIG9sZFZlcnNpb24gPSBhcmdzWzBdO1xuICB2YXIgbmV3VmVyc2lvbiA9IGFyZ3NbMV07XG4gIHZhciBFWENMVURFRF9ESVJTID0gbmV3IFNldChbXG4gICAgJy5naXQnLFxuICAgICdub2RlX21vZHVsZXMnLFxuICAgICd2ZW5kb3InXG4gIF0pO1xuICB2YXIgSU5DTFVERURfRVhURU5TSU9OUyA9IG5ldyBTZXQoW1xuICAgIC8vIFRoaXMgZXh0ZW5zaW9uIHdoaXRlbGlzdCBpcyBob3cgd2UgYXZvaWQgbW9kaWZ5aW5nIGJpbmFyeSBmaWxlc1xuICAgICcnLFxuICAgICcuY3NzJyxcbiAgICAnLmh0bWwnLFxuICAgICcuanMnLFxuICAgICcuanNvbicsXG4gICAgJy5tZCcsXG4gICAgJy5zY3NzJyxcbiAgICAnLnR4dCcsXG4gICAgJy55bWwnXG4gIF0pO1xuICByZXBsYWNlUmVjdXJzaXZlbHkoJy4nLCBFWENMVURFRF9ESVJTLCBJTkNMVURFRF9FWFRFTlNJT05TLCBvbGRWZXJzaW9uLCBuZXdWZXJzaW9uKTtcbn07XG5cbm1haW4ocHJvY2Vzcy5hcmd2LnNsaWNlKDIpKTtcbiJdfQ==